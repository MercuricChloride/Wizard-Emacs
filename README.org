#+TITLE: Readme
#+PROPERTY: header-args :tangle config.el
#+AUTO_TANGLE: t
#+AUTHOR: Alexander Gusev

* Config

[[./OrbBanner.png]]

This is my doom emacs config, you will notice that it is an org document. This documentation doesn't mirror my source code, it is my source code! This literate document's code blocks become my actual config whenever I save it.

** Visual Things


*** Fullscreen on startup
This is for when I am not running emacs server

#+begin_src emacs-lisp
(add-hook 'server-switch-hook #'raise-frame)
(add-hook 'window-setup-hook #'toggle-frame-fullscreen)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src


*** Remove workspaces on server start

By default when you run emacs --daemon, it will create a new workspace, and so when I connect for the first time I have 2 workspaces open at once. This bothered me and so I removed this functionality.

#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src


*** Silly little wizard things

My config is pretty stupid. And as such I have a bunch of wizard themed things in my theme.


**** Startup Wizard Song

#+begin_src emacs-lisp
(defun play-song (song)
  (async-start
   (lambda ()
     (shell-command (concat "mpv ~/.config/doom/" song)))))

(defun shadow-money-wizard-gang ()
  (interactive)
  (play-song "Trimmed.mp3"))
#+end_src

**** Skyrim quest sound effects for org-todo items

#+begin_src emacs-lisp
(defun org-quest-complete (marker)
  (interactive)
  (when (eq (plist-get marker :type) 'todo-state-change)
    (let ((todo-state (org-get-todo-state)))
      (when (string= todo-state "DONE")
        (play-song "questDone.mp3"))
      (when (string= todo-state "TODO")
        (play-song "questStart.mp3")))))

(add-hook 'org-trigger-hook 'org-quest-complete)
#+end_src

Example:
***** TODO Something


**** Wizard Frame
#+begin_src emacs-lisp
(setq fancy-splash-image "~/.config/doom/OrbBanner.png")
(setq frame-title-format "Castin spells")
#+end_src


*** Transparent Frames

Sometimes I like to have my frames be transparent, so that's what this does

#+begin_src emacs-lisp
(setq transparent-background-mode t)

(defun custom/transparent-mode ()
        (interactive)
        (if    transparent-background-mode
               (progn
                (setq transparent-background-mode nil)
                (set-frame-parameter nil 'alpha-background 100))
               (progn
                (setq transparent-background-mode )
                (set-frame-parameter nil 'alpha-background 70))))
#+end_src


*** Fonts

This assumes you have:
- Monoid Nerd Font Mono

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Monoid Nerd Font Mono" :size 15 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Monoid Nerd Font Mono" :size 18)
      doom-big-font (font-spec :family "Monoid Nerd Font Mono" :size 22))
#+end_src


** EMMS Config

All of my local music is stored in $HOME/bandcamp

#+begin_src emacs-lisp

(setq emms-source-file-default-directory "~/bandcamp/")

(map! :leader
      :desc "open emms"
      "ee" #'emms)

(map! :leader
      :desc "toggle play/pause"
      "ep" #'emms-pause)

(map! :leader

      :desc "open playlist"
      "eo" #'emms-play-playlist)

(map! :leader
      :desc "open directory"
      "ed" #'emms-play-directory)
#+end_src


** Chat-gpt

I wrote this plugin for myself that adds a bunch of functionality using the chat-gpt api. Funnily much of this functionality is mirrored by github copilot x it would seem.

The plugin requires a environment variable of OPENAI_API_KEY

#+begin_src emacs-lisp
(use-package! chatgpt
  :defer t
  :bind ("C-c q" . chatgpt-query))

(setq chatgpt-code-query-map
      '(
        ;; ChatGPT.el defaults, string for each shortcut
        ("bug" . "There is a bug in the following, please help me fix it.")
        ("doc" . "Please write the documentation for the following.")
        ("improve" . "Please improve the following.")
        ("understand" . "What is the following?")
        ("refactor" . "Please refactor the following.")
        ("suggest" . "Please make suggestions for the following.")
        ;; your shortcut
        ("prompt-name" . "My custom prompt.")))
;(use-package! chatgpt
  ;:config
  ;(setq chatgpt-api-key (getenv "OPENAI_API_KEY")))

;(map! :leader
      ;:desc "chatgpt"
      ;"cgg" #'chatgpt-reply)
;(map! :leader
      ;:desc "chatgpt"
      ;"cgp" #'chatgpt-paste)
;(map! :leader
      ;:desc "chatgpt"
      ;"cgs" #'chatgpt-skyrimify)
#+end_src


** Modeline

Not a ton of config here, I just added a clock to the default bar

#+begin_src emacs-lisp
(display-time)
(setq display-time-format "%H:%M")
#+end_src
** +Comment out lines

Just a binding to comment out either a line if there is no region selected or a region if selected

#+begin_src emacs-lisp
;; unmap the existing undo tree keybindings
(map!
      :leader
      :desc "comment out"
      "/" #'comment-or-uncomment-region-or-line)

(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
             (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))
#+end_src

** Local Leader Remap

I prefer having my comma be used for local leader rather than SPC-M

#+begin_src emacs-lisp
(map!
 :after evil-snipe-mode
   "," nil)
(setq doom-localleader-key ",")
#+end_src

** WAT Mode
I work with web assembly a lot

#+begin_src emacs-lisp
(require 'wat-mode)
#+end_src

** Copilot
Copilot is super useful. Here is my config. Super basic.

#+begin_src emacs-lisp
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map copilot-completion-map
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)))

(map! :leader
      :desc "toggle copilot"
      "t" #'copilot-mode)

(map! :leader
      :desc "toggle copilot"
      "t" #'copilot-mode)

(map! "<backtab>" #'copilot-accept-completion)

(after! copilot
  (defun my/copilot-or-evil-ret ()
    "Accept GitHub Copilot suggestion or execute 'evil-ret' command."
    (interactive)
    (if (and copilot-mode (copilot--overlay-visible))
        (copilot-accept-completion)
      (evil-ret)))
  ;; Bind the modified function to the Enter key in Evil mode
  (define-key evil-normal-state-map (kbd "RET") 'my/copilot-or-evil-ret)
  (define-key evil-insert-state-map (kbd "RET") 'my/copilot-or-evil-ret)
  (define-key evil-visual-state-map (kbd "RET") 'my/copilot-or-evil-ret)
  (setq copilot-node-executable "~/.local/share/nvm/v18.16.0/bin/node"))
#+end_src


** Dashboard
#+begin_src emacs-lisp
(setq
 dashboard-center-content t
 dashboard-startup-banner "~/.config/doom/OrbBanner.png"
 doom-fallback-buffer-name "*dashboard*"
 dashboard-week-agenda t)

(dashboard-open)
#+end_src

#+RESULTS:
: #<buffer *dashboard*>


** Text Editing
*** Tree Sitter

I want to use tree-sitter for some stuff, here is my config.

#+begin_src emacs-lisp
(global-tree-sitter-mode)
(setq treesit-extra-load-path nil)
(setq treesit-language-source-alist '((solidity "https://github.com/JoranHonig/tree-sitter-solidity")))

  (defun nf/treesit-install-all-languages ()
    "Install all languages specified by `treesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
	      (treesit-install-language-grammar lang)
	      (message "`%s' parser was installed." lang)
	      (sit-for 0.75))))
#+end_src


*** LSP

**** General
#+begin_src emacs-lisp :tangle yes
(setq lsp-lens-enable nil)
(setq +format-with-lsp nil)
#+end_src

**** Solidity Config

Solidity currently doesn't have the greatest support in emacs. I hope to change this and at least make it a bit better. But for now the current experience isn't wonderful. Here are some things that make it an ok experience for now.

YOU ALSO HAVE TO INSTALL THE NOMIC-LABS-SOLIDITY-LANGUAGE-SERVER
[[https://github.com/NomicFoundation/hardhat-vscode/tree/development/server]]

#+begin_src emacs-lisp
;; solidity lsp-support
(after! lsp-mode
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection '("nomicfoundation-solidity-language-server" "--stdio")) :major-modes '(solidity-mode) :priority -1 :server-id 'solidity-ls)))

;; solidity lsp config
(add-hook 'solidity-mode-hook (lambda ()
                                (progn
                                  (format-all-mode -1)
                                  (lsp))))
#+end_src

**** Tailwind

#+begin_src emacs-lisp
(use-package! lsp-tailwindcss
  :init (setq lsp-tailwindcss-add-on-mode t))
#+end_src

**** Rust config

#+begin_src emacs-lisp :tangle yes
;; rust config
(after! lsp-mode
  (progn
    (setq lsp-rust-analyzer-server-display-inlay-hints t)
    (setq lsp-rust-analyzer-inlay-hints-mode t))
  (setq company-minimum-prefix-length 1))

(after! rustic-mode
  (setq rustic-rustfmt-args "--edition 2021" rustic-format-on-save t))
#+end_src

**** Javascript
#+begin_src emacs-lisp :tangle yes
(add-hook 'js-mode-hook
          (lambda ()
            (flycheck-mode t)
            (setq flycheck-javascript-eslint-executable "eslint")
            (setq flycheck-javascript-eslint-args '("--fix"))))
#+end_src
*** DAP Mode

I am playing around with debuggers, mainly for rust. I don't use this very much yet but here is my config:

#+begin_src emacs-lisp
(dap-auto-configure-mode)
(require 'dap-lldb)
(setq dap-lldb-debug-program '("rust-lldb"))
#+end_src



*** Visual

I am a sane human so I use 2 spaces per tab. I also like relative line numbers.

#+begin_src emacs-lisp
(setq doom-theme 'wheatgrass)
(setq display-line-numbers-type 'relative)
(setq tab-width 2)
(setq evil-shift-width 2)
(setq web-mode-code-indent-offset 2)

(after! doom-themes
  (setq
   doom-themes-enable-bold t    ; if nil, bold is universally disabled
   doom-themes-enable-italic t)) ; if nil, italics is universally disabled

(custom-set-faces!
  '(font-lock-comment-face :slant italic))


(setq treemacs-display-current-project-exclusively t)
(setq which-key-idle-delay 0.1)
#+end_src

I also like my terminal popup to be a bit larger so that's what this config is for.

#+begin_src emacs-lisp
;(set-popup-rules! '(("^\\*doom\:vterm-popup" :size 0.75 :side bottom :select t :autosave t :modeline t :ttl t :quit nil)))
#+end_src


*** Org Mode

My org mode config is also pretty simple. Just some basic configuration in place. I do use org-auto tangle.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-auto-tangle-mode)

(setq org-directory "~/org/")
(setq org-journal-dir "~/org/journal/")
(setq org-journal-file-format "%Y-%m-%d.org")
#+end_src


**** Org reveal
#+begin_src emacs-lisp :tangle yes
(setq org-reveal-root "file:///~/reveal_js/js/reveal.js")
#+end_src

**** Literate Programming Config
#+begin_src emacs-lisp :tangle yes
;; add a org on save hook that calls org-babel-tangle
(add-hook 'after-save-hook
          (lambda ()
            (when (eq major-mode 'org-mode)
              (org-babel-tangle))))

;; this makes it so that org src blocks are opened to the right of the current window
;; the reason it says "current-window" is because the pop-rules are applied to the "Org Src" buffer
(after! org
  (setq org-src-window-setup 'current-window)
  (set-popup-rules! '(("^\\*Org Src" :size 0.5 :side right :quit nil :select t :autosave t :modeline t :ttl nil))))

;; this function is called before popping up a new window to edit a src file in
(defun org-babel-edit-prep:rust (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp))

(defun my-org-src-mode-setup ()
  "Setup LSP for org-src buffers."
  (when (and (buffer-file-name) lsp-mode)
    (lsp-deferred)))

(add-hook 'org-src-mode-hook #'my-org-src-mode-setup)

(defun org-heading-path ()
  (interactive)
  (let ((path (org-get-outline-path t)))
    (message (mapconcat 'identity (flatten-list path) "/"))))

(defun edit-tangled-block ()
  (interactive)
  (let* ((element (org-element-at-point))
         (lang (org-element-property :language element))
         (name (org-element-property :name element))
         (tangle (org-element-property :tangle element)))
    (message tangle)))

(defun insert-org-unique-name ()
  (interactive)
  (let ((name (org-heading-path)))
    (insert (concat "#+NAME: " name "\n"))))

(map!
 :mode org-mode
 :desc "insert org unique name"
 "C-c i" #'insert-org-unique-name)

(defun my-detangle ()
  (interactive)
  (let ((cursor-pos (point)))
    (org-babel-detangle)
    (previous-buffer)
    (goto-char cursor-pos)))

(map!
  :mode org-mode
  :desc "tangle"
  :localleader
  "t" #'org-babel-tangle)

(map!
  :mode rustic-mode
  :desc "detangle"
  :localleader
  "t" #'my-detangle)
#+end_src

**** Org Pomodoro

The org pomodoro plugin doesn't have a keybinding by default. So I am adding one.

#+begin_src emacs-lisp
(map!
    :mode org-mode
    :desc "org pomodoro"
    :localleader
    "cp" #'org-pomodoro)
#+end_src
**** Copy from clipboard for images

I need the ability to copy an image from my clipboard and use it within org mode. These functions allow this.

#+begin_src emacs-lisp
(defun my/org-clip-image ()
 (interactive)
 (let* ((default-directory "~/org/images/")
        (image-file (format-time-string "%Y%m%d%H%M%S.png")))
     (shell-command (concat "xclip -selection clipboard -t image/png -o > " image-file))
     (if (= (shell-commmand-to-string (concat "file --mime-type -b " image-file)) "image/png")
         (progn
          (insert (concat "[[" default-directory image-file "]]"))
          (org-display-inline-images))
         (progn
          (message "Clipboard does not contain an image")
          (delete-file image-file)))))
#+end_src

**** Pretty characters

#+begin_src emacs-lisp
(setq org-pretty-entities t)
#+end_src


*** Identifiers

I just kinda have this set honestly. Don't use it for much.

#+begin_src emacs-lisp
(setq user-full-name "Alexander Gusev"
      user-mail-address "goose@soulbound.xyz")
#+end_src


*** Zen mode

Chakras so aligned brah

#+begin_src emacs-lisp
(map! :leader
      :desc "Toggle Zen Mode"
      "z" #'+zen/toggle)
#+end_src
